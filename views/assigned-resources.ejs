<!DOCTYPE html>
<html>
<head>
    <title>Assigned Schedules</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.min.css">
    <style>
        body { padding-top: 32px; background: #f8fafc; }
        .container { max-width: 1300px; }
        .card { box-shadow: 0 2px 12px rgba(0,0,0,0.07); border-radius: 12px; }
        .table { border-radius: 10px; overflow: hidden; background: #fff; }
        .table thead th { background: #e3f2fd; color: #1976d2; font-weight: 600; border-bottom: 2px solid #90caf9; }
        .table-striped tbody tr:nth-of-type(odd) { background: #f5faff; }
        .table-hover tbody tr:hover { background: #e3f2fd; }
        .btn-primary, .btn-success, .btn-info { border-radius: 20px; font-weight: 500; }
        .form-label { font-weight: 500; color: #1976d2; }
        .form-select, .form-control { border-radius: 8px; }
        .page-title { font-size: 2.6rem; font-weight: 800; color: #1976d2; margin-bottom: 0; letter-spacing: 1px; }
        h1.page-title { font-family: 'Segoe UI', 'Arial', sans-serif; }
        .filter-card { background: #e3f2fd; border-radius: 10px; padding: 18px 24px; margin-bottom: 24px; }
        .table-responsive { border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.04); background: #fff; }
        #exportExcelBtn { background: linear-gradient(90deg,#1976d2 0,#64b5f6 100%); color: #fff; border: none; }
        #exportExcelBtn:hover { background: linear-gradient(90deg,#1565c0 0,#42a5f5 100%); }
        .btn-success { background: linear-gradient(90deg,#43a047 0,#81c784 100%); color: #fff; border: none; }
        .btn-success:hover { background: linear-gradient(90deg,#388e3c 0,#66bb6a 100%); }
        .gap-3 { gap: 1.5rem !important; }
        .shadow-sm { box-shadow: 0 2px 8px rgba(25, 118, 210, 0.08); }
    </style>
</head>
<body class="bg-light">

<div class="container mt-5">
    <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
      <div class="alert alert-danger alert-dismissible fade show" role="alert" style="font-size:1.1rem;font-weight:500;">
        <%= errorMessage %>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>
    <% } %>
    <div class="d-flex justify-content-between align-items-center mb-3">
      <form class="d-flex align-items-center" method="get" action="/assigned-resources">
        <label for="monthPicker" class="form-label me-2 mb-0" style="font-weight:600;color:#1976d2;font-size:1.1rem;">Select Month:</label>
        <input type="month" id="monthPicker" name="month" class="form-control me-2" style="max-width:180px;" value="<%= typeof monthFilter !== 'undefined' && monthFilter ? monthFilter : '' %>">
        <button type="submit" class="btn btn-primary">Go</button>
      </form>
    </div>
    <div class="mb-4 text-center">
      <h1 class="page-title mb-0">Assigned Schedules</h1>
    </div>
    <div class="filter-card">
      <form class="row g-3" method="get" action="/assigned-resources">
        <div class="col-md-4">
            <label for="employeeFilter" class="form-label">Employee</label>
            <select id="employeeFilter" name="employee" class="form-select">
                <option value="">All Employees</option>
                <% if (typeof allEmployees !== 'undefined') { allEmployees.forEach(function(emp) { %>
                    <option value="<%= emp.empCode %>" <%= (employeeFilter === emp.empCode ? 'selected' : '') %>>
                        <%= emp.empCode %> - <%= emp.name %>
                        <% if (emp.division) { %> | <%= emp.division %> <% } %>
                        <% if (emp.designation) { %> | <%= emp.designation %> <% } %>
                    </option>
                <% }) } %>
            </select>
        </div>
        <div class="col-md-4">
            <label for="projectFilter" class="form-label">Project</label>
            <select id="projectFilter" name="project" class="form-select">
                <option value="">All Projects</option>
                <% if (typeof allProjects !== 'undefined') { allProjects.forEach(function(proj) { %>
                    <option value="<%= proj.projectName %>" <%= (projectFilter === proj.projectName ? 'selected' : '') %>>
                        <%= proj.projectName %>
                        <% if (proj.projectManager) { %> | Manager: <%= proj.projectManager %> <% } %>
                    </option>
                <% }) } %>
            </select>
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Filter</button>
            <a href="/assigned-resources" class="btn btn-secondary ms-2">Reset</a>
        </div>
      </form>
    </div>
    <div class="card mb-4 p-3">
      <div class="d-flex justify-content-end align-items-center gap-3">
        <button class="btn btn-success shadow-sm" data-bs-toggle="modal" data-bs-target="#scheduleModal">Add Schedule</button>
        <button class="btn btn-info shadow-sm" id="exportExcelBtn">Export to Excel</button>
      </div>
    </div>
    <div class="table-responsive" style="overflow-x:auto;">
    <table id="assignedSchedulesTable" class="table table-bordered table-striped table-hover align-middle shadow-sm" style="min-width:1200px;">
        <thead>
            <tr>
                <th style="min-width:100px;">Emp Code</th>
                <th style="min-width:150px;">Resource Name</th>
                <th style="min-width:180px;">Project Assigned</th>
                <% if (dateRange && dateRange.length) { dateRange.forEach(function(date) { %>
                    <th style="min-width:60px;"><%= date %></th>
                <% }); } %>
                <th style="min-width:80px;">Total Hours</th>
                <!-- Debug column removed -->
                <th style="min-width:120px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            <!-- <% schedules.forEach(s => { %>
                <tr id="row-<%= s._id %>">
                    <td><%= s.employee?.empCode || 'N/A' %></td>
                    <td><%= s.employee?.name || 'N/A' %></td>
                    <td><%= s.employee?.payrollCompany || 'N/A' %></td>
                    <td><%= s.employee?.homePractice || 'N/A' %></td>
                    <td><%= s.employee?.practiceManager || 'N/A' %></td>
                    <td class="project-cell"><span><%= s.project?.projectName || 'N/A' %></span></td>
                    <td><%= s.project?.client || 'N/A' %></td>
                    <td><%= s.project?.division || 'N/A' %></td>
                    <% if (dateRange && dateRange.length) { dateRange.forEach(function(date) { %>
                        <td class="hours-cell" data-date="<%= date %>"><span><%= (s.dailyHours && s.dailyHours[date] !== undefined && s.dailyHours[date] != 0) ? s.dailyHours[date] : '' %></span></td>
                    <% }); } %>
                    <td class="action-cell">
                        <button class="btn btn-sm btn-primary me-1" onclick="enableInlineEdit('<%= s._id %>')">Edit</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteSchedule('<%= s._id %>')">Delete</button>
                    </td>
                </tr> -->
            <!-- <% }) %> -->
            <% schedules.forEach(s => { %>
                <% let totalHours = 0; %>
                <tr id="row-<%= s._id %>">
                    <td><%= s.employee?.empCode || 'N/A' %></td>
                    <td><%= s.employee?.name || 'N/A' %></td>
                    <!-- <td><%= s.employee?.payrollCompany || 'N/A' %></td>
                    <td><%= s.employee?.homePractice || 'N/A' %></td>
                    <td><%= s.employee?.practiceManager || 'N/A' %></td> -->
                    <td class="project-cell"><span><%= s.project?.projectName || 'N/A' %></span></td>
                    <!-- <td><%= s.project?.client || 'N/A' %></td>
                    <td><%= s.project?.division || 'N/A' %></td> -->
                    <% if (dateRange && dateRange.length) { dateRange.forEach(function(date) { %>
                        <% let h = (s.dailyHours && s.dailyHours[date] !== undefined && s.dailyHours[date] != 0) ? Number(s.dailyHours[date]) : 0; totalHours += h; %>
                        <td class="hours-cell" data-date="<%= date %>"><span><%= h !== 0 ? h : '' %></span></td>
                    <% }); } %>
                    <td><%= totalHours %></td>
                    <!-- Debug column removed -->
                    <td class="action-cell">
                        <button class="btn btn-sm btn-primary me-1" onclick="enableInlineEdit('<%= s._id %>')">Edit</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteSchedule('<%= s._id %>')">Delete</button>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
    </div>

    <!-- Warning Alert -->
    <div id="validationWarning" class="alert alert-danger d-none mt-3" role="alert"></div>

</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/2.0.8/js/dataTables.min.js"></script>

<script>
    // Export table to Excel using SheetJS, excluding last column (Actions) and cleaning up cell content for perfect alignment
    document.getElementById('exportExcelBtn').addEventListener('click', function() {
        var table = document.getElementById('assignedSchedulesTable');
        // Clone table to avoid modifying the DOM
        var clone = table.cloneNode(true);
        // Remove last column from header
        var headerRow = clone.querySelector('thead tr');
        if (headerRow) headerRow.removeChild(headerRow.lastElementChild);
        // Remove last column from each body row
        clone.querySelectorAll('tbody tr').forEach(function(row) {
            row.removeChild(row.lastElementChild);
        });
        // Remove all <span> tags inside cells for cleaner export
        clone.querySelectorAll('td, th').forEach(function(cell) {
            if (cell.querySelector('span')) {
                cell.innerHTML = cell.querySelector('span').textContent;
            }
        });
        // Export with column widths for better alignment
        var ws = XLSX.utils.table_to_sheet(clone);
        // Set column widths for better visual alignment in Excel
        var colWidths = [];
        clone.querySelectorAll('thead th').forEach(function(th) {
            var text = th.textContent.trim();
            var wch = Math.max(12, text.length + 4); // Minimum 12, add padding
            colWidths.push({ wch });
        });
        ws['!cols'] = colWidths;
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Assigned Schedules");
        XLSX.writeFile(wb, 'assigned_schedules.xlsx');
    });
    $(document).ready(function() {
        $('#assignedSchedulesTable').DataTable({
            "paging": true,
            "ordering": true,
            "info": true,
            "searching": true,
            "scrollX": true // Enable horizontal scroll for wide tables
        });
    });

    // Track current edit id
    let editingRowId = null;

    function enableInlineEdit(id) {
        if (editingRowId) return; // Only one row at a time
        editingRowId = id;
        const row = $('#row-' + id);
        // Project cell
        const projectCell = row.find('.project-cell');
        const projectValue = projectCell.text().trim();
        projectCell.attr('data-original', projectValue);
        projectCell.html(`<input type="text" class="form-control form-control-sm" value="${projectValue}" id="edit-project-${id}" value="${projectValue}">`);
        // Daily hours cells
        row.find('.hours-cell').each(function() {
            const date = $(this).data('date');
            const value = $(this).text().trim();
            $(this).attr('data-original', value);
            $(this).html(`<input type="number" min="0" max="8" class="form-control form-control-sm" value="${value}" id="edit-hours-${id}-${date}" value="${value}">`);
        });
        // Actions
        row.find('.action-cell').html(`
            <button class="btn btn-sm btn-success me-1" onclick="saveInlineEdit('${id}')">Save</button>
            <button class="btn btn-sm btn-secondary" onclick="cancelInlineEdit('${id}')">Cancel</button>
        `);
    }

    function saveInlineEdit(id) {
        const row = $('#row-' + id);
        const project = row.find(`#edit-project-${id}`).val();
        const dailyHours = {};
        row.find('.hours-cell').each(function() {
            const date = $(this).data('date');
            const value = $(this).find('input').val();
            dailyHours[date] = value;
        });
        $.ajax({
            url: '/assigned-resources/' + id,
            type: 'PUT',
            data: { project: { projectName: project }, dailyHours },
            success: function(response) {
                if (response.success) {
                    // Update row in-place
                    const updated = response.schedule;
                    const row = $('#row-' + id);
                    // Project cell
                    row.find('.project-cell').html(`<span>${updated.project?.projectName || 'N/A'}</span>`);
                    // Daily hours cells
                    row.find('.hours-cell').each(function() {
                        const date = $(this).data('date');
                        const value = updated.dailyHours && updated.dailyHours[date] !== undefined && updated.dailyHours[date] != 0 ? updated.dailyHours[date] : '';
                        $(this).html(`<span>${value}</span>`);
                    });
                    // Actions
                    row.find('.action-cell').html(`
                        <button class="btn btn-sm btn-primary me-1" onclick="enableInlineEdit('${id}')">Edit</button>
                        <button class="btn btn-sm btn-danger" onclick="deleteSchedule('${id}')">Delete</button>
                    `);
                    editingRowId = null;
                    // Hide any previous error
                    $('#validationWarning').addClass('d-none').text('');
                } else {
                    // Show error in alert box
                    $('#validationWarning').removeClass('d-none').text(response.error || 'Unknown error');
                }
            },
            error: function(xhr) {
                // Show error in alert box
                let msg = xhr.responseJSON?.error || 'Unknown error';
                $('#validationWarning').removeClass('d-none').text(msg);
            }
        });
    }

    function cancelInlineEdit(id) {
        location.reload(); // Simple revert for now
    }

    // Open modal for Add/Edit
    function openEditModal(id) {
        currentEditId = id;
        $.get('/assigned-resources/' + id, function(response) {
            if (response.success && response.schedule) {
                $('#scheduleModalLabel').text('Edit Schedule');
                $('#empCode').val(response.schedule.employee?.empCode || '');
                $('#resourceName').val(response.schedule.employee?.name || '');
                $('#projectAssigned').val(response.schedule.project?.projectName || '');
                $('#division').val(response.schedule.project?.division || '');
                if (response.schedule.dailyHours) {
                    Object.keys(response.schedule.dailyHours).forEach(function(date) {
                        $("input[name='dailyHours[" + date + "]']").val(response.schedule.dailyHours[date]);
                    });
                }
                var modal = new bootstrap.Modal(document.getElementById('scheduleModal'));
                modal.show();
            } else {
                alert('Could not load schedule data.');
            }
        });
    }

    // Handle Add (reset form)
    $('#scheduleModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget);
        if (!button || button.hasClass('btn-success')) {
            $('#scheduleModalLabel').text('Add Schedule');
            $('#scheduleForm')[0].reset();
            currentEditId = null;
        }
    });

    // Handle form submit (AJAX for Add/Edit)
    $('#scheduleForm').on('submit', function(e) {
        e.preventDefault();
        var formData = $(this).serialize();
        let method = currentEditId ? 'PUT' : 'POST';
        let url = currentEditId ? '/assigned-resources/' + currentEditId : '/assigned-resources';
        $.ajax({
            url: url,
            type: method,
            data: formData,
            success: function(response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert('Save failed: ' + (response.error || 'Unknown error'));
                }
            },
            error: function(xhr) {
                alert('Save failed: ' + (xhr.responseJSON?.error || 'Unknown error'));
            }
        });
        var modalEl = document.getElementById('scheduleModal');
        var modal = bootstrap.Modal.getInstance(modalEl);
        if (modal) modal.hide();
    });

    function deleteSchedule(id) {
        if (confirm('Are you sure you want to delete this schedule?')) {
            $.ajax({
                url: '/assigned-resources/' + id,
                type: 'DELETE',
                success: function(response) {
                    if (response.success) {
                        // Optionally, remove the row from the table or reload
                        location.reload();
                    } else {
                        alert('Delete failed: ' + (response.error || 'Unknown error'));
                    }
                },
                error: function(xhr) {
                    alert('Delete failed: ' + (xhr.responseJSON?.error || 'Unknown error'));
                }
            });
        }
    }
</script>

</body>
</html>